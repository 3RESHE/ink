{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ink Language",
  "scopeName": "source.ink",
  "fileTypes": [ "ink" ],
  "injections": {
    "L:(meta.script.ink | meta.style.ink) (meta.lang.js | meta.lang.javascript) - (meta source)": {
      "patterns": [
        {
          "name": "meta.embedded.block.ink",
          "begin": "(?<=>)(?!</)",
          "end": "(?=</)",
          "contentName": "source.js",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    "L:(meta.script.ink | meta.style.ink) (meta.lang.ts | meta.lang.typescript) - (meta source)": {
      "patterns": [
        {
          "name": "meta.embedded.block.ink",
          "begin": "(?<=>)(?!</)",
          "end": "(?=</)",
          "contentName": "source.ts",
          "patterns": [
            {
              "include": "source.ts"
            }
          ]
        }
      ]
    },
    "L:meta.script.ink - meta.lang - (meta source)": {
      "patterns": [
        {
          "begin": "(?<=>)(?!</)",
          "end": "(?=</)",
          "name": "meta.embedded.block.ink",
          "contentName": "source.js",
          "patterns": [
            {
              "include": "source.js"
            }
          ]
        }
      ]
    },
    "L:meta.style.ink meta.lang.css - (meta source)": {
      "patterns": [
        {
          "begin": "(?<=>)(?!</)",
          "end": "(?=</)",
          "name": "meta.embedded.block.ink",
          "contentName": "source.css",
          "patterns": [
            {
              "include": "source.css"
            }
          ]
        }
      ]
    },
    "L:meta.style.ink - meta.lang - (meta source)": {
      "patterns": [
        {
          "begin": "(?<=>)(?!</)",
          "end": "(?=</)",
          "name": "meta.embedded.block.ink",
          "contentName": "source.css",
          "patterns": [
            {
              "include": "source.css"
            }
          ]
        }
      ]
    },
    "L:meta.template.ink - meta.lang - (meta source)": {
      "patterns": [
        {
          "begin": "(?<=>)\\s",
          "end": "(?=</template)",
          "patterns": [
            {
              "include": "#scope"
            }
          ]
        }
      ]
    }
  },
  "patterns": [
    {
      "include": "#scope"
    }
  ],
  "repository": {
    "scope": {
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#tags"
        },
        {
          "include": "#interpolation"
        },
        {
          "begin": "(?<=>|})",
          "end": "(?=<|{)",
          "name": "text.ink"
        }
      ]
    },
    "comments": {
      "begin": "<!--",
      "end": "-->",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.ink"
        }
      },
      "name": "comment.block.ink",
      "patterns": [
        {
          "begin": "(@)(component)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.keyword.ink"
            },
            "2": {
              "name": "storage.type.class.component.ink keyword.declaration.class.component.ink"
            }
          },
          "end": "(?=-->)",
          "contentName": "comment.block.documentation.ink",
          "patterns": [
            {
              "match": ".*?(?=-->)",
              "captures": {
                "0": {
                  "patterns": [
                    {
                      "include": "text.html.markdown"
                    }
                  ]
                }
              }
            },
            {
              "include": "text.html.markdown"
            }
          ]
        },
        {
          "match": "\\G-?>|<!--(?!>)|<!-(?=-->)|--!>",
          "name": "invalid.illegal.characters-not-allowed-here.ink"
        }
      ]
    },
    "destructuring": {
      "patterns": [
        {
          "begin": "(?={)",
          "end": "(?<=})",
          "name": "meta.embedded.expression.ink source.ts",
          "patterns": [
            {
              "include": "source.ts#object-binding-pattern"
            }
          ]
        },
        {
          "begin": "(?=\\[)",
          "end": "(?<=\\])",
          "name": "meta.embedded.expression.ink source.ts",
          "patterns": [
            {
              "include": "source.ts#array-binding-pattern"
            }
          ]
        }
      ]
    },
    "destructuring-const": {
      "patterns": [
        {
          "begin": "(?={)",
          "end": "(?<=})",
          "name": "meta.embedded.expression.ink source.ts",
          "patterns": [
            {
              "include": "source.ts#object-binding-pattern-const"
            }
          ]
        },
        {
          "begin": "(?=\\[)",
          "end": "(?<=\\])",
          "name": "meta.embedded.expression.ink source.ts",
          "patterns": [
            {
              "include": "source.ts#array-binding-pattern-const"
            }
          ]
        }
      ]
    },
    "interpolation": {
      "patterns": [
        {
          "begin": "\\{",
          "end": "\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.embedded.begin.ink"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.embedded.end.ink"
            }
          },
          "contentName": "meta.embedded.expression.ink source.ts",
          "patterns": [
            {
              "begin": "\\G\\s*(?={)",
              "end": "(?<=})",
              "patterns": [
                {
                  "include": "source.ts#object-literal"
                }
              ]
            },
            {
              "include": "source.ts"
            }
          ]
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "include": "#attributes-keyvalue"
        },
        {
          "include": "#attributes-interpolated"
        }
      ]
    },
    "attributes-interpolated": {
      "begin": "(?<!:|=)\\s*({)",
      "end": "(\\})",
      "captures": {
        "1": {
          "name": "entity.other.attribute-name.ink"
        }
      },
      "contentName": "meta.embedded.expression.ink source.ts",
      "patterns": [
        {
          "include": "source.ts"
        }
      ]
    },
    "attributes-keyvalue": {
      "begin": "((?:--)?[_$[:alpha:]][_\\-$[:alnum:]]*)",
      "beginCaptures": {
        "0": {
          "patterns": [
            {
              "match": "--.*",
              "name": "support.type.property-name.ink"
            },
            {
              "match": ".*",
              "name": "entity.other.attribute-name.ink"
            }
          ]
        }
      },
      "end": "(?=\\s*+[^=\\s])",
      "name": "meta.attribute.$1.ink",
      "patterns": [
        {
          "begin": "=",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.key-value.ink"
            }
          },
          "end": "(?<=[^\\s=])(?!\\s*=)|(?=/?>)",
          "patterns": [
            {
              "include": "#attributes-value"
            }
          ]
        }
      ]
    },
    "attributes-value": {
      "patterns": [
        {
          "include": "#interpolation"
        },
        {
          "match": "(?:(['\"])([0-9._]+[\\w%]{,4})(\\1))|(?:([0-9._]+[\\w%]{,4})(?=\\s|/?>))",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.begin.ink"
            },
            "2": {
              "name": "constant.numeric.decimal.ink"
            },
            "3": {
              "name": "punctuation.definition.string.end.ink"
            },
            "4": {
              "name": "constant.numeric.decimal.ink"
            }
          }
        },
        {
          "match": "([^\\s\"'=<>`/]|/(?!>))+",
          "name": "string.unquoted.ink",
          "patterns": [
            {
              "include": "#interpolation"
            }
          ]
        },
        {
          "begin": "(['\"])",
          "end": "\\1",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.ink"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.ink"
            }
          },
          "name": "string.quoted.ink",
          "patterns": [
            {
              "include": "#interpolation"
            }
          ]
        }
      ]
    },
    "attributes-generics": {
      "begin": "(generics)(=)([\"'])",
      "beginCaptures": {
        "1": {
          "name": "entity.other.attribute-name.ink"
        },
        "2": {
          "name": "punctuation.separator.key-value.ink"
        },
        "3": {
          "name": "punctuation.definition.string.begin.ink"
        }
      },
      "end": "(\\3)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.ink"
        }
      },
      "contentName": "meta.embedded.expression.ink source.ts",
      "patterns": [
        {
          "include": "#type-parameters"
        }
      ]
    },
    "type-parameters": {
      "name": "meta.type.parameters.ts",
      "patterns": [
        {
          "include": "source.ts#comment"
        },
        {
          "name": "storage.modifier.ts",
          "match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(extends|in|out|const)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))"
        },
        {
          "include": "source.ts#type"
        },
        {
          "include": "source.ts#punctuation-comma"
        },
        {
          "name": "keyword.operator.assignment.ts",
          "match": "(=)(?!>)"
        }
      ]
    },
    "tags": {
      "patterns": [
        {
          "include": "#tags-lang"
        },
        {
          "include": "#tags-void"
        },
        {
          "include": "#tags-general-end"
        },
        {
          "include": "#tags-general-start"
        }
      ]
    },
    "tags-name": {
      "patterns": [
        {
          "match": "(ink)(:)([a-z][\\w0-9:-]*)",
          "captures": {
            "1": {
              "name": "keyword.control.ink"
            },
            "2": {
              "name": "punctuation.definition.keyword.ink"
            },
            "3": {
              "name": "entity.name.tag.ink"
            }
          }
        },
        {
          "match": "slot",
          "name": "keyword.control.ink"
        },
        {
          "match": "[A-Z][a-zA-Z0-9_]*",
          "name": "support.class.component.ink"
        },
        {
          "match": "[a-z][\\w0-9:]*-[\\w0-9:-]*",
          "name": "meta.tag.custom.ink entity.name.tag.ink"
        },
        {
          "match": "[a-z][\\w0-9:-]*",
          "name": "entity.name.tag.ink"
        }
      ]
    },
    "tags-start-attributes": {
      "begin": "\\G",
      "end": "(?=/?>)",
      "name": "meta.tag.start.ink",
      "patterns": [
        {
          "include": "#attributes"
        }
      ]
    },
    "tags-lang-start-attributes": {
      "begin": "\\G",
      "end": "(?=/>)|>",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.end.ink"
        }
      },
      "name": "meta.tag.start.ink",
      "patterns": [
        {
          "include": "#attributes-generics"
        },
        {
          "include": "#attributes"
        }
      ]
    },
    "tags-start-node": {
      "match": "(<)([^/\\s>/]*)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.begin.ink"
        },
        "2": {
          "patterns": [
            {
              "include": "#tags-name"
            }
          ]
        }
      },
      "name": "meta.tag.start.ink"
    },
    "tags-end-node": {
      "match": "(</)(.*?)\\s*(>)|(/>)",
      "captures": {
        "1": {
          "name": "meta.tag.end.ink punctuation.definition.tag.begin.ink"
        },
        "2": {
          "name": "meta.tag.end.ink",
          "patterns": [
            {
              "include": "#tags-name"
            }
          ]
        },
        "3": {
          "name": "meta.tag.end.ink punctuation.definition.tag.end.ink"
        },
        "4": {
          "name": "meta.tag.start.ink punctuation.definition.tag.end.ink"
        }
      }
    },
    "tags-lang": {
      "begin": "<(script|style|template)",
      "end": "</\\1\\s*>|/>",
      "beginCaptures": {
        "0": {
          "patterns": [
            {
              "include": "#tags-start-node"
            }
          ]
        }
      },
      "endCaptures": {
        "0": {
          "patterns": [
            {
              "include": "#tags-end-node"
            }
          ]
        }
      },
      "name": "meta.$1.ink",
      "patterns": [
        {
          "begin": "\\G(?=\\s*[^>]*?(type|lang)\\s*=\\s*(['\"]|)(?:text/)?(\\w+)\\2)",
          "end": "(?=</|/>)",
          "name": "meta.lang.$3.ink",
          "patterns": [
            {
              "include": "#tags-lang-start-attributes"
            }
          ]
        },
        {
          "include": "#tags-lang-start-attributes"
        }
      ]
    },
    "tags-void": {
      "begin": "(<)(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)(?=\\s|/?>)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.ink"
        },
        "2": {
          "name": "entity.name.tag.ink"
        }
      },
      "end": "/?>",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.begin.ink"
        }
      },
      "name": "meta.tag.void.ink",
      "patterns": [
        {
          "include": "#attributes"
        }
      ]
    },
    "tags-general-start": {
      "begin": "(<)([^/\\s>/]*)",
      "end": "(/?>)",
      "beginCaptures": {
        "0": {
          "patterns": [
            {
              "include": "#tags-start-node"
            }
          ]
        }
      },
      "endCaptures": {
        "1": {
          "name": "meta.tag.start.ink punctuation.definition.tag.end.ink"
        }
      },
      "name": "meta.scope.tag.$2.ink",
      "patterns": [
        {
          "include": "#tags-start-attributes"
        }
      ]
    },
    "tags-general-end": {
      "begin": "(</)([^/\\s>]*)",
      "end": "(>)",
      "beginCaptures": {
        "1": {
          "name": "meta.tag.end.ink punctuation.definition.tag.begin.ink"
        },
        "2": {
          "name": "meta.tag.end.ink",
          "patterns": [
            {
              "include": "#tags-name"
            }
          ]
        }
      },
      "endCaptures": {
        "1": {
          "name": "meta.tag.end.ink punctuation.definition.tag.end.ink"
        }
      },
      "name": "meta.scope.tag.$2.ink"
    }
  }
}
